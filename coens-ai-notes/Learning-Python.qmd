---
title: "Python for Neural Networks"
---

## Why Python for Neural Networks?

Python has become the de facto language for machine learning and neural networks, thanks to its:
- Rich ecosystem of libraries
- Easy-to-read syntax
- Extensive community support
- Powerful numerical computing capabilities

## Essential Python Libraries

### 1. NumPy
```python
import numpy as np

# Create input data
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 1, 1, 0])  # XOR function
```

### 2. TensorFlow/Keras
```python
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Dense(4, activation='relu', input_shape=(2,)),
    keras.layers.Dense(1, activation='sigmoid')
])
```

### 3. PyTorch
```python
import torch
import torch.nn as nn

class XORNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.layer1 = nn.Linear(2, 4)
        self.layer2 = nn.Linear(4, 1)
```

## Getting Started

1. Install Python from [python.org](https://python.org)
2. Set up a virtual environment:
   ```bash
   python -m venv myenv
   source myenv/bin/activate  # On Unix
   myenv\Scripts\activate     # On Windows
   ```
3. Install required packages:
   ```bash
   pip install numpy tensorflow torch scikit-learn
   ```

## From Pharo to Python

### Key Differences
1. Syntax:
   ```pharo
   "Pharo"
   network := NNetwork new.
   network configure: 4 hidden: 6 nbOfOutputs: 3.
   ```
   ```python
   # Python
   network = NeuralNetwork()
   network.configure(4, hidden=6, nb_outputs=3)
   ```

2. Libraries:
   - Pharo: Built-in neural network implementation
   - Python: Multiple mature frameworks available

## Resources for Learning

1. Online Courses:
   - Coursera's Deep Learning Specialization
   - Fast.ai's Practical Deep Learning
   - Google's Machine Learning Crash Course

2. Documentation:
   - [TensorFlow Docs](https://tensorflow.org)
   - [PyTorch Tutorials](https://pytorch.org/tutorials)
   - [Scikit-learn Guide](https://scikit-learn.org)

3. Practice Projects:
   - MNIST digit classification
   - Image recognition
   - Natural language processing

## Best Practices

1. Code Organization:
   - Use clear variable names
   - Document your code
   - Follow PEP 8 style guide

2. Development Environment:
   - Use Jupyter notebooks for experimentation
   - Version control with Git
   - Regular code backups

3. Performance:
   - Vectorize operations with NumPy
   - Use GPU acceleration when available
   - Profile code for bottlenecks

## Next Steps

1. Choose a framework (TensorFlow or PyTorch)
2. Complete online tutorials
3. Build simple projects
4. Join the Python ML community

Remember: The concepts you learned in Pharo translate well to Python - focus on understanding the principles rather than just the syntax.

