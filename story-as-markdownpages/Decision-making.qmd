---
title: "Decision Making with Perceptrons"
---

## From Simple Gates to Complex Decisions

While we've seen how Perceptrons can implement basic logical operations, their true power lies in their ability to make more complex decisions. Let's explore how Perceptrons can handle real-world decision-making scenarios.

### Understanding Decision Boundaries

A Perceptron essentially creates a decision boundary in the input space. For two inputs, this boundary is a straight line that separates the space into two regions: one where the Perceptron outputs 1, and another where it outputs 0.

The weights and bias determine:
1. The orientation of this line (through the weights)
2. Where the line is positioned (through the bias)

## Implementing Decision Making

Let's create a Perceptron that can make decisions based on two numeric inputs:

```pharo
decisionMaker := Neuron new
    step;
    weights: #(0.5 -0.8);
    bias: 0.1.
```

This Perceptron might represent a simple decision-making system where:
- The first input could be a positive factor (weight 0.5)
- The second input could be a negative factor (weight -0.8)
- The bias (0.1) adjusts the overall threshold for making a positive decision

### Testing Different Scenarios

Try these different input combinations to see how the Perceptron makes decisions:
```pharo
decisionMaker fire: #(1 0)    "Positive factor only"
decisionMaker fire: #(0 1)    "Negative factor only"
decisionMaker fire: #(1 1)    "Both factors"
```

## Real-World Applications

This decision-making capability forms the foundation for many practical applications:
- Spam detection (deciding if an email is spam based on various features)
- Credit approval (determining if a loan should be approved)
- Medical diagnosis (classifying test results as normal or abnormal)

In the next chapters, we'll explore how we can train Perceptrons to learn these decision boundaries automatically from examples, rather than setting the weights and bias manually.
